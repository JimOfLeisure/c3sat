package parseciv3

import (
	"encoding/json"
	"strconv"
)

// WorldSettings Returns the information needed to regenerate the map
// presuming the map was originally generated by Civ3 and not later edited
func (c Civ3Data) WorldSettings() [][3]string {
	var worldSize = [...]string{"Tiny", "Small", "Standard", "Large", "Huge", "Random"}
	// "No Barbarians" is actually -1. To make code simpler, add one to value for array index
	var barbs = [...]string{"No Barbarians", "Sedentary", "Roaming", "Restless", "Raging", "Random"}
	var landMass = [...]string{"Archipelago", "Continents", "Pangea", "Random"}
	var oceanCoverage = [...]string{"80% Water", "70% Water", "60% Water", "Random"}
	var climate = [...]string{"Arid", "Normal", "Wet", "Random"}
	var temperature = [...]string{"Warm", "Temperate", "Cool", "Random"}
	var age = [...]string{"3 Billion", "4 Billion", "5 Billion", "Random"}
	var settings [][3]string
	if civ3Data, ok := c.Data["WRLD"].(Wrld); ok {
		o := civ3Data.GenOptions
		settings = [][3]string{
			{"Setting", "Choice", "Result"},
			{"World Seed", strconv.FormatUint(uint64(civ3Data.WorldSeed), 10), ""},
			{"World Size", worldSize[o.Size], ""},
			{"Barbarians", barbs[o.Barbarians+1], barbs[o.BarbariansFinal+1]},
			{"Land Mass", landMass[o.Landmass], landMass[o.LandmassFinal]},
			{"Water Coverage", oceanCoverage[o.OceanCoverage], oceanCoverage[o.OceanCoverageFinal]},
			{"Climate", climate[o.Climate], climate[o.ClimateFinal]},
			{"Temperature", temperature[o.Temperature], temperature[o.TemperatureFinal]},
			{"Age", age[o.Age], age[o.AgeFinal]},
		}
	}
	return settings
}

// Map ...
type Map struct {
	Width                  int32  `json:"width"`
	Height                 int32  `json:"height"`
	Tile                   []Tile `json:"tile"`
	CivStartLocationTileID [32]int32
}

// JSONMap returns byte array to write to JSON file, then read with html/d3.html map reader in this repo
func (c Civ3Data) JSONMap() []byte {
	var civmap Map
	if tiles, ok := c.Data["TILE"].([]Tile); ok {
		civmap.Tile = tiles
	}
	if wrld, ok := c.Data["WRLD"].(Wrld); ok {
		civmap.Height = wrld.MapHeight
		civmap.Width = wrld.MapWidth
		civmap.CivStartLocationTileID = wrld.CivStartLocationTileID
	}
	out, _ := json.Marshal(civmap)
	return out
}
